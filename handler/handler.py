from matplotlib import pyplot as plt                                                      # Импортируем модуль pyplot из библиотеки matplotlib
import time                                                                               # Импортируем модуль time стандартной библиотеки python
import sys                                                                                # Импортируем модуль sys стандартной библиотеки python

'''
Класс для представления измерительных приборов
'''
class device:
    def __init__(self):
        self.ip_number = self.start = self.stop = self.unit = None                        # Атрибуты класса
        self.reliable_data = []                                                           # Список-атрибут для хранения достоверных данных

    '''
    Метод для установки ip-адреса измеритеьного прибора в виде числа в строковом формате
    '''
    def set_ip_number(self, ip_addr):
        self.ip_number = ip_addr

    '''
    Метод для установки диапазонов достоверности измерительного прибора
    '''
    def set_ranges(self, range_start, range_stop):
        self.start = range_start
        self.stop = range_stop

    '''
    Метод для установки единицы измерения, соответствующей измерительному прибору
    '''
    def set_unit(self, unit_letter):
        self.unit = unit_letter


'''
Функция формирования объектов класса device на основе данных из файла с описанием измерительных приборов
'''
def create_devices(filename):
    try:
        file = open(filename, encoding = 'utf-8')                                         # Открываем файл
    except FileNotFoundError:                                                             # Перехватываем исключение
        print(f"Error: device file {filename} not found")                                 # Выводим ошибку
        exit()                                                                            # Завершаем выполнение программы

    lines = file.read().splitlines()                                                      # Считываем данные из файла в виде строк без символов '\n'
    file.close()                                                                          # Закрываем файл

    devices = []                                                                          # Создаем список для объектов класса device (измерительных приборов)
    
    '''
    Для каждой строки из файла выполняем действия:
    '''
    for line in lines:
        dev = device()                                                                    # Создаём объект класса device
        dev.set_ip_number(line.split('\t')[0])                                            # Устанавливаем ip-адрес измеритеьного прибора в виде числа в строковом формате
        dev.set_ranges(float(line.split('\t')[1]), float(line.split('\t')[2]))            # Устанавливаем диапазоны достоверности измерительного прибора
        dev.set_unit(line.split('\t')[3])                                                 # Устанавливаем единицу измерения, соответствующую измерительному прибору
        devices.append(dev)                                                               # Добавляем измерительный прибор в список devices

    return devices                                                                        # Возвращаем список измерительных приборов


'''
Функция загрузки достоверных данных из файла в объекты класса измерительных приборов
'''
def load_reliable_data(filename, devicelist):
    try:
        file = open(filename)                                                             # Открываем файл
    except FileNotFoundError:                                                             # Перехватываем исключение
        print(f"Error: log file {filename} not found")                                    # Выводим ошибку
        return -1                                                                         # Возвращаем -1, что свидетельствует об ошибке

    lines = file.read().splitlines()                                                      # Считываем данные из файла в виде строк без символов '\n'
    file.close()                                                                          # Закрываем файл
    
    t = lines[0].split('\t')[1]                                                           # Создаем вспомогательную переменную для хранения даты и времени из первой строки файла 

    start = time.mktime(time.strptime(t[:-4], "%y.%d.%m %H:%M:%S")) + float(t[-4:len(t)]) # Переводим время в первой строке файла в количество секунд с начала эпохи (1 января 1970 г.)

    '''
    Для каждой строки из файла выполняем действия:
    '''
    for line in lines:
        '''
        Для каждого измерительного прибора выполняем:
        '''
        for dev in devicelist:
            '''
            Если ip-адрес в строке совпадает с ip-адресом измерительного устройства:
            '''
            if ''.join(line.split('\t')[0].split('.')) == dev.ip_number:
                                                                                           
                fvalue = float(line.split('\t')[2])                                       # Сохраняем значение физической величины во вспомогательную переменную

                '''
                Если значение физической величины входит в диапазон достоверности измерительного прибора:
                '''
                if fvalue >= dev.start and fvalue <= dev.stop:
                    dev.reliable_data.append((fvalue, line.split('\t')[1]))               # Записываем в список-атрибут данные в формате кортежа (значение, дата и время)  

    return start                                                                          # Возвращаем количество секунд с начала эпохи, соответствующее дате и времени первой строки файла


'''
Функция для формирования данных для построения зависимости мощности от времени
'''
def gen_x_y(devices, start_time):

    dataI = []                                                                            # Создаем вспомогательный список для данных о токе 
    dataU = []                                                                            # Создаем вспомогательный список для данных о напряжении
    dataP = []                                                                            # Создаем вспомогательный список для данных о мощности

    '''
    Для каждого измерительного прибора выполняем:
    '''
    for dev in devices:
        '''
        Для каждого кортежа из списка с достоверными данными измерительного прибора выполняем:
        '''
        for d in dev.reliable_data:
            t = d[1]                                                                      # Создаем вспомогательную переменную для хранения даты и времени из кортежа
            str_time = time.strptime(t[:-4], "%y.%d.%m %H:%M:%S")                         # Переводим первую часть даты и времени в секунды с начала эпохи
            sec = time.mktime(str_time) + float(t[-4:len(t)])                             # Прибавляем доли секунды из второй части даты и времени и записываем в переменную
            '''
            Если единица измерения измерительного прибора амперы:
            '''
            if dev.unit == 'А':
                dataI.append((d[0], sec - start_time))                                    # Записываем данные в список для силы тока
            '''
            Если единица измерения измерительного прибора вольты:
            '''
            if dev.unit == 'В':
                dataU.append((d[0], sec - start_time))                                    # Записываем данные в список для напряжения

    '''
    Для каждого кортежа в списке данных о напряжении:
    '''
    for Ud in dataU:
        dif_list = []                                                                     # Создаем вспомогательный список для хранения временной разницы между данными о токе и напряжении

        '''
        Для каждого кортежа в списке данных о токе:
        '''
        for Id in dataI:
            dif_list.append(abs(Ud[1]-Id[1]))                                             # Добавляем во вспомогательный список временную разницу

        index = dif_list.index(min(dif_list))                                             # Получаем индекс кортежа с данными о токе с минимальной разницей во времени относительно данных о напряжении
        dataP.append((round(Ud[0]*dataI[index][0], 4), Ud[1]))                            # Добавляем кортеж со значением мощности и временем получения данных о напряжении в список для мощности

    x = []                                                                                # Создаем список с данными для оси OX
    y = []                                                                                # Создаем список с данными для оси OY

    '''
    Из каждого кортежа данных о мощности:
    '''
    for data in dataP:
        x.append(data[1])                                                                 # Извлекаем время и помещаем в список x
        y.append(data[0])                                                                 # Извлекаем значение мощности и помещаем в список у

    return x, y                                                                           # Возвращаем списки с данными


'''
Функция для построения графика с помощью модуля matplotlib
'''
def plotter(x, y):
    plt.plot(x, y, '*-')                                                                  # Строим график
    plt.xlabel('Время, c')                                                                # Подписываем ось OX
    plt.ylabel('Мощность, Вт')                                                            # Подписываем ось OY
    plt.title('Зависимость мощности от времени')                                          # Задаем заголовок графика
    plt.axis([0, max(x) + 0.1*max(x), 0, max(y)+ 0.1*max(y)])                             # Задаем пределы осей
    plt.grid(which='major')                                                               # Включаем основную сетку
    plt.grid(which='minor', linestyle=':')                                                # Включаем дополнительную сетку
    plt.minorticks_on()                                                                   # Отображаем дополнительную сетку
    plt.show()                                                                            # Выводим окно с графиком на экран и ожидаем его закрытия


'''
Если аргументы командной строки не указаны или указано слишком много аргументов:
'''
if len(sys.argv) < 3 or len(sys.argv) > 3:
    print('Use command in format:')                                                       # Выводим инструкции:
    print(' Python|Python3 handler.py <path to devices list file> <path to log file>')    # Выводим формат вызова Python-скрипта
else:                                                                                     # В противном случае:
    devices = create_devices(sys.argv[1])                                                 # Вызываем функцию формирования объектов класса device на основе данных из файла, указанного первым аргументом
    ret = load_reliable_data(sys.argv[2], devices)                                        # Вызываем функцию загрузки достоверных данных из файла, указанного во втором аргументе

    '''
    Если функции загрузки достоверных данных из файла data.txt завершилась успешно (вернула положительное число)
    '''
    if ret > 0:
        x, y = gen_x_y(devices, ret)                                                      # Вызываем функцию формирования данных для построения зависимости мощности от времени
        plotter(x, y)                                                                     # Вызываем функцию для построения графика с помощью модуля matplotlib